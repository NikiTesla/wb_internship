// Code generated by MockGen. DO NOT EDIT.
// Source: nats.go

// Package mock_natsserver is a generated GoMock package.
package mock_natsserver

import (
	reflect "reflect"
	orders "wb_internship/pkg/orders"

	gomock "github.com/golang/mock/gomock"
	nats "github.com/nats-io/nats.go"
)

// MockNats is a mock of Nats interface.
type MockNats struct {
	ctrl     *gomock.Controller
	recorder *MockNatsMockRecorder
}

// MockNatsMockRecorder is the mock recorder for MockNats.
type MockNatsMockRecorder struct {
	mock *MockNats
}

// NewMockNats creates a new mock instance.
func NewMockNats(ctrl *gomock.Controller) *MockNats {
	mock := &MockNats{ctrl: ctrl}
	mock.recorder = &MockNatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNats) EXPECT() *MockNatsMockRecorder {
	return m.recorder
}

// ExecMessage mocks base method.
func (m *MockNats) ExecMessage(msg *nats.Msg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecMessage indicates an expected call of ExecMessage.
func (mr *MockNatsMockRecorder) ExecMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecMessage", reflect.TypeOf((*MockNats)(nil).ExecMessage), msg)
}

// GetFromCache mocks base method.
func (m *MockNats) GetFromCache(id int) (*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromCache", id)
	ret0, _ := ret[0].(*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromCache indicates an expected call of GetFromCache.
func (mr *MockNatsMockRecorder) GetFromCache(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromCache", reflect.TypeOf((*MockNats)(nil).GetFromCache), id)
}

// Listen mocks base method.
func (m *MockNats) Listen(sourceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", sourceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockNatsMockRecorder) Listen(sourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockNats)(nil).Listen), sourceName)
}

// LoadCacheFromDB mocks base method.
func (m *MockNats) LoadCacheFromDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCacheFromDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadCacheFromDB indicates an expected call of LoadCacheFromDB.
func (mr *MockNatsMockRecorder) LoadCacheFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCacheFromDB", reflect.TypeOf((*MockNats)(nil).LoadCacheFromDB))
}
